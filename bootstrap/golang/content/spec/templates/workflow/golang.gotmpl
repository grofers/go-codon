{{define "outputmapexpander"}}map[string]interface{} {
	{{range $key, $value := .Children}}
	{{if eq $value.Type "map"}}
	"{{$key}}": {{template "outputmapexpander" $value}},
	{{else}}
	"{{$key}}": maybe({{$value.FlowName}}_expr_{{$value.ExpressionSrno}}(expr_map)),
	{{end}}
	{{end}}
}{{end}}
package workflows
{{if .OrigSpec.References.go}}
import (
	config "github.com/grofers/go-codon/runtime/config"
	{{range $index, $element := .OrigSpec.References.go}}
	{{$index}} "{{$element}}"
	{{end}}
)
{{end}}

{{range $expr, $expr_obj := .ExpressionMap}}
{{if eq $expr_obj.Type "jmes"}}var {{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}} *jmespath.JMESPath{{end}}{{if eq $expr_obj.Type "jngo"}}var {{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}} *pongo2.Template{{end}}{{end}}

func init() {
	{{range $expr, $expr_obj := .ExpressionMap}}
	{{if eq $expr_obj.Type "jmes"}}{{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}} = jmespath.MustCompile("{{escapestring $expr_obj.Raw}}"){{end}}{{if eq $expr_obj.Type "jngo"}}{{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}} = pongo2.Must(pongo2.FromString("{{escapestring $expr_obj.Raw}}")){{end}}{{end}}
}

type {{printf "%s_data" $.OrigSpec.Name }} struct {
	var_map			map[string]interface{}
	var_map_mutex	sync.RWMutex
}

func {{ pascalize .OrigSpec.Name }}(var_map map[string]interface{}) interface{} {
	var err interface{}
	err = nil

	flow_data := &{{printf "%s_data" $.OrigSpec.Name }}{
		var_map: var_map,
		var_map_mutex: sync.RWMutex{},
	}

	{{ if eq (len .OrigSpec.Start) 1 }}
	{{printf "task_%s__%s" $.OrigSpec.Name (index $.OrigSpec.Start 0)}}(flow_data)
	{{ else if gt (len .OrigSpec.Start) 1 }}
	var wg sync.WaitGroup
	wg.Add({{len .OrigSpec.Start}})
	{{ range $index, $element := .OrigSpec.Start }}
	go func() {
		defer func () {
			if r := recover(); r != nil {
				err = r
			}
			wg.Done()
		}()
		{{printf "task_%s__%s" $.OrigSpec.Name $element}}(flow_data)
	}()
	{{ end }}
	wg.Wait()
	{{ end }}

	if err != nil {
		panic(err)
	}

	expr_map := make(map[string]interface{})
	expr_map["main"] = flow_data.var_map
	expr_map["constants"] = config.YmlConfig.Constants

	defer flow_data.var_map_mutex.RUnlock()
	flow_data.var_map_mutex.RLock()
	{{if eq .LanguageSpec.OutputObj.Type "map"}}
	ret_map := {{template "outputmapexpander" .LanguageSpec.OutputObj}}
	{{else}}
	ret_map := maybe({{$.OrigSpec.Name}}_expr_{{.LanguageSpec.OutputObj.ExpressionSrno}}(expr_map))
	{{end}}

	return ret_map
}

{{range $index, $element := .OrigSpec.Tasks}}
func {{printf "task_%s__%s" $.OrigSpec.Name $index}}(flow_data *{{printf "%s_data" $.OrigSpec.Name }}) error {
	expr_map := make(map[string]interface{})
	expr_map["main"] = flow_data.var_map
	expr_map["constants"] = config.YmlConfig.Constants

	var err error
	is_error := false

	{{ if $element.Action }}
	arg_map := make(map[string]interface{})
	{{if gt (len $element.Input) 0}}
	func() {
		defer flow_data.var_map_mutex.RUnlock()
		flow_data.var_map_mutex.RLock()
		{{range $index2, $element2 := $element.Input}}
		arg_map["{{$index2}}"], _ = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2).Srno }}(expr_map){{end}}
	}()
	{{end}}
	{{if $element.Timeout}}arg_map["_timeout"] = int64({{$element.Timeout}}){{end}}

	{{ if eq (index $.ActionMap $element.Action).Type "clients" }}
	log.Println("[DEBUG] Sending a request to {{ (index $.ActionMap $element.Action).Pascalized }} API")
	resp, rerr := {{ (index $.ActionMap $element.Action).Pascalized }}(arg_map)
	err = rerr
	if err == nil {
		resp_map := resp.Payload
		log.Println("[DEBUG] Received response from {{ (index $.ActionMap $element.Action).Pascalized }} API: ", resp_map)
		expr_map["action"] = resp_map
	}
	{{ else }}
	resp, rerr := {{ (index $.ActionMap $element.Action).Pascalized }}(arg_map)
	err = rerr
	if err == nil {
		expr_map["action"] = resp
	}
	{{ end }}

	{{ else if $element.WithItems }}
	var perr interface{} = nil
	var wg sync.WaitGroup
	var iterlist_interface interface{}
	var iterlist []interface{}
	var_maps := []map[string]interface{} {}
	err_objs := []*error {}

	func() {
		defer flow_data.var_map_mutex.RUnlock()
		flow_data.var_map_mutex.RLock()
		iterlist_interface, err = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element.WithItems).Srno }}(expr_map)
	}()

	func() {
		if err != nil {
			return
		}
		var ok bool
		iterlist, ok = iterlist_interface.([]interface{})
		if !ok {
			err = fmt.Errorf("Error casting iteration list into array: %s\n", iterlist_interface)
			return
		}

		wg.Add(len(iterlist))

		for _, element := range iterlist {
			expr_map["item"] = element
			new_var_map := make(map[string]interface{})
			var nil_err error
			var err_obj *error
			err_obj = &nil_err
			{{if gt (len $element.Loop.Input) 0}}
			func() {
				defer flow_data.var_map_mutex.RUnlock()
				flow_data.var_map_mutex.RLock()
				{{range $index2, $element2 := $element.Loop.Input}}
				new_var_map["{{$index2}}"], _ = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2).Srno }}(expr_map){{end}}
			}()
			{{end}}
			var_maps = append(var_maps, new_var_map)
			err_objs = append(err_objs, err_obj)


			go func() {
				var terr error
				defer func() {
					if r := recover(); r != nil {
						perr = r
					}
					if terr != nil {
						(*err_obj) = terr
						is_error = true
						err = terr
					}
					wg.Done()
				}()
				terr = {{printf "task_%s__%s" $.OrigSpec.Name $element.Loop.TaskName}}(&{{printf "%s_data" $.OrigSpec.Name }} {
					var_map: new_var_map,
					var_map_mutex: sync.RWMutex{},
				})
			}()
		}
		expr_map["item"] = nil

		wg.Wait()
	}()

	if perr != nil {
		panic(perr)
	}
	{{ end }}

	{{ if $element.Action }}
	if err != nil {
		log.Println("[WARN] Failed to get response from {{ (index $.ActionMap $element.Action).Pascalized }} API: ", resp, " Err: ", err, " Args: ", arg_map)
		is_error = true
		err_val := reflect.ValueOf(err)
		if err_val.Kind() == reflect.Struct {
			err_payload := err_val.FieldByName("Payload")
			if err_payload.IsValid() {
				expr_map["action"] = err_payload.Interface()
			}
		} else {
			expr_map["action_exception"] = err
		}
	}
	{{ else if $element.WithItems }}
	if err != nil {
		is_error = true
	}
	{{ end }}

	{{ if $element.WithItems }}
	{{ if $element.Loop.ErrorPublishList }}
	func() {
		defer flow_data.var_map_mutex.Unlock()
		flow_data.var_map_mutex.Lock()
		{{range $index2, $element2 := $element.Loop.ErrorPublishList}}
		flow_data.var_map["{{$element2.VariableName}}"] = []interface{}{}
		{{end}}
		for index, element := range iterlist {
			expr_map["item"] = element
			var err_obj *error
			err_obj = err_objs[index]
			if err_obj != nil && *err_obj != nil {
				err_val := reflect.ValueOf(*err_obj)
				if err_val.Kind() == reflect.Struct {
					err_payload := err_val.FieldByName("Payload")
					if err_payload.IsValid() {
						expr_map["task"] = err_payload.Interface()
					}
				} else {
					expr_map["task_exception"] = *err_obj
				}
			}
			{{range $index2, $element2 := $element.Loop.ErrorPublishList}}
			flow_data.var_map["{{$element2.VariableName}}"] = append(flow_data.var_map["{{$element2.VariableName}}"].([]interface{}), maybe({{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)))
			{{end}}
		}
	}()
	{{ end }}
	{{ if $element.Loop.PublishList }}
	func() {
		defer flow_data.var_map_mutex.Unlock()
		flow_data.var_map_mutex.Lock()
		{{range $index2, $element2 := $element.Loop.PublishList}}
		flow_data.var_map["{{$element2.VariableName}}"] = []interface{}{}
		{{end}}
		for index, element := range iterlist {
			expr_map["item"] = element
			expr_map["task"] = var_maps[index]
			var err_obj *error
			err_obj = err_objs[index]
			if err_obj != nil && *err_obj != nil {
				expr_map["task"] = nil
			}
			{{range $index2, $element2 := $element.Loop.PublishList}}
			flow_data.var_map["{{$element2.VariableName}}"] = append(flow_data.var_map["{{$element2.VariableName}}"].([]interface{}), maybe({{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)))
			{{end}}
		}
	}()
	{{ end }}
	{{ end }}
	{{if gt (len $element.ErrorPublishList) 0}}
	if is_error {
		func() {
			defer flow_data.var_map_mutex.Unlock()
			flow_data.var_map_mutex.Lock()
			{{range $index2, $element2 := $element.ErrorPublishList}}
			flow_data.var_map["{{$element2.VariableName}}"], _ = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)
			{{end}}
		}()
	}
	{{ end }}
	{{if gt (len $element.PublishList) 0}}
	if !is_error {
		func() {
			defer flow_data.var_map_mutex.Unlock()
			flow_data.var_map_mutex.Lock()
			{{range $index2, $element2 := $element.PublishList}}
			flow_data.var_map["{{$element2.VariableName}}"], _ = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)
			{{end}}
		}()
	}
	{{ end }}

	{{range $index2, $element2 := $element.OnSuccessList}}
	var expr{{$element2.Srno}} interface{}
	var e{{$element2.Srno}} error
	{{end}}
	{{range $index2, $element2 := $element.OnErrorList}}
	var eexpr{{$element2.Srno}} interface{}
	var ee{{$element2.Srno}} error
	{{end}}
	{{if gt (len $element.OnErrorList) 0}}
	if is_error {
		func() {
			defer flow_data.var_map_mutex.RUnlock()
			flow_data.var_map_mutex.RLock()
			{{range $index2, $element2 := $element.OnErrorList}}
			eexpr{{$element2.Srno}}, ee{{$element2.Srno}} = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map){{end}}
		}()
	}
	{{end}}
	{{if gt (len $element.OnSuccessList) 0}}
	if !is_error {
		func() {
			defer flow_data.var_map_mutex.RUnlock()
			flow_data.var_map_mutex.RLock()
			{{range $index2, $element2 := $element.OnSuccessList}}
			expr{{$element2.Srno}}, e{{$element2.Srno}} = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map){{end}}
		}()
	}
	{{end}}

	{{ if gt (len $element.OnErrorList) 0 }}
	if is_error {
		{{if eq (len $element.OnErrorList) 1}}
		if ee1 == nil && eexpr1.(bool) {
			{{printf "task_%s__%s" $.OrigSpec.Name (index $element.OnErrorList 0).TaskName}}(flow_data)
		}
		{{else if gt (len $element.OnErrorList) 1}}
		var wg sync.WaitGroup
		var wgerr interface{}
		wgerr = nil
		{{range $index2, $element2 := $element.OnErrorList}}
		if ee{{$element2.Srno}} == nil && eexpr{{$element2.Srno}}.(bool) {
			wg.Add(1)
			go func() {
				defer func () {
					if r := recover(); r != nil {
						wgerr = r
					}
					wg.Done()
				}()
				{{printf "task_%s__%s" $.OrigSpec.Name $element2.TaskName}}(flow_data)
			}()
		}
		{{end}}
		wg.Wait()
		{{end}}
	}
	{{ end }}
	{{ if gt (len $element.OnSuccessList) 0 }}
	if !is_error {
		{{if eq (len $element.OnSuccessList) 1}}
		if e1 == nil && expr1.(bool) {
			{{printf "task_%s__%s" $.OrigSpec.Name (index $element.OnSuccessList 0).TaskName}}(flow_data)
		}
		{{else if gt (len $element.OnSuccessList) 1}}
		var wg sync.WaitGroup
		var wgerr interface{}
		wgerr = nil
		{{range $index2, $element2 := $element.OnSuccessList}}
		if e{{$element2.Srno}} == nil && expr{{$element2.Srno}}.(bool) {
			wg.Add(1)
			go func() {
				defer func () {
					if r := recover(); r != nil {
						wgerr = r
					}
					wg.Done()
				}()
				{{printf "task_%s__%s" $.OrigSpec.Name $element2.TaskName}}(flow_data)
			}()
		}
		{{end}}
		wg.Wait()
		{{end}}
	}
	{{ end }}

	{{range $index2, $element2 := $element.OnCompleteList}}
	onc_expr{{$element2.Srno}}, onc_e{{$element2.Srno}} := {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)
	if onc_e{{$element2.Srno}} == nil && onc_expr{{$element2.Srno}}.(bool) {
		{{printf "task_%s__%s" $.OrigSpec.Name $element2.TaskName}}(flow_data)
	}
	{{end}}

	{{if gt (len $element.CompletePublishList) 0}}
	func() {
		defer flow_data.var_map_mutex.Unlock()
		flow_data.var_map_mutex.Lock()
		{{range $index2, $element2 := $element.CompletePublishList}}
		flow_data.var_map["{{$element2.VariableName}}"], _ = {{$.OrigSpec.Name}}_expr_{{ (index $.ExpressionMap $element2.ExpressionName).Srno }}(expr_map)
		{{end}}
	}()
	{{end}}

	if is_error {
		return err
	} else {
		return nil
	}
}
{{end}}

{{range $expr, $expr_obj := .ExpressionMap}}
// {{$expr}} -> {{$expr_obj}}
func {{$.OrigSpec.Name}}_expr_{{$expr_obj.Srno}}(var_map map[string]interface{}) (result interface{}, err error) {
	{{if eq $expr_obj.Type "json"}}err = json.Unmarshal([]byte("{{escapestring $expr_obj.Raw}}"), &result){{else if eq $expr_obj.Type "jmes"}}result, err = {{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}}.Search(var_map){{else if eq $expr_obj.Type "jngo"}}var t_result string
	t_result, err = {{$.OrigSpec.Name}}_eval_{{$expr_obj.Srno}}.Execute(pongo2.Context(var_map))
	if err != nil {
		result = nil
		return
	}
	err = json.Unmarshal([]byte(t_result), &result){{end}}
	if err == nil {
		result = resolvePointers(result)
	}
	return
}
{{end}}
